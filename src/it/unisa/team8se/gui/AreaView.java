/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package it.unisa.team8se.gui;

import it.unisa.team8se.DatabaseContext;
import it.unisa.team8se.Message;
import it.unisa.team8se.UserSession;
import it.unisa.team8se.models.Area;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.LinkedList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author giuse
 */
public class AreaView extends javax.swing.JFrame {

    private DefaultComboBoxModel<String> comboBoxModel;
    private DefaultListModel<String> listModel;
    
    /**
     * Creates new form NewJFrame
     */
    public AreaView() {
        if (!DatabaseContext.isConnected()) {
            DatabaseContext.connectDatabase();
        }
        initComboBoxModel();
        initListModel();
        initComponents();
    }
    
    private void initComboBoxModel() {
        comboBoxModel = new DefaultComboBoxModel<>();
        refreshLocations();
    }

    private void initListModel() {
        listModel = new DefaultListModel<>();
        if (comboBoxModel.getSize() != 0) {
            String defaultLocation = (String) comboBoxModel.getElementAt(0);
            refreshSectors(defaultLocation);
        }
    }

    protected boolean refreshLocations() {
        comboBoxModel.removeAllElements();
        LinkedList<String> ls = Area.getAllLocations();
        if (ls != null && ls.size() > 0) {
            for (String l : ls) {
                comboBoxModel.addElement(l);
            }    
            return true;
        }
        return false;
    }

    protected boolean refreshSectors(String location) {
        listModel.clear();
        LinkedList<Area> as = Area.getAllSectorsOf(location);
        if (as != null && as.size() > 0) {
            for (Area a : as) {
                listModel.addElement(a.getSector());
            }
            return true;
        }
        return false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        locationBox = new javax.swing.JComboBox<>();
        addAreaButton = new javax.swing.JButton();
        removeLocationButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sectorList = new javax.swing.JList<>();
        addSectorButton = new javax.swing.JButton();
        removeSectorButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Area View");
        setBackground(new java.awt.Color(255, 204, 153));
        setIconImage(Message.getImageIcon());
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 204, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Branch", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        locationBox.setModel(comboBoxModel);
        locationBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationBoxActionPerformed(evt);
            }
        });

        addAreaButton.setText("Add");
        addAreaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAreaButtonActionPerformed(evt);
            }
        });

        removeLocationButton.setText("Remove");
        removeLocationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeLocationButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(locationBox, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 170, Short.MAX_VALUE)
                .addComponent(addAreaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeLocationButton)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(locationBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addAreaButton)
                    .addComponent(removeLocationButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(255, 204, 153));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sectors", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        sectorList.setModel(listModel);
        sectorList.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sectorListFocusGained(evt);
            }
        });
        jScrollPane1.setViewportView(sectorList);

        addSectorButton.setText("Add");
        addSectorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSectorButtonActionPerformed(evt);
            }
        });

        removeSectorButton.setText("Remove");
        removeSectorButton.setEnabled(false);
        removeSectorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSectorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addSectorButton)
                        .addGap(4, 4, 4)
                        .addComponent(removeSectorButton)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addSectorButton)
                    .addComponent(removeSectorButton)))
        );

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(backButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.getAccessibleContext().setAccessibleName("Branch");
        jPanel1.getAccessibleContext().setAccessibleName("Sectors");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
       /* try {
            UserSession.close();
        } catch (SQLException ex) {
            Message.raiseError(this, "Errore nella chiusura!");
        }*/
    }//GEN-LAST:event_formWindowClosing

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        /*SystemAdminForm view = new SystemAdminForm();
        view.setVisible(true);
        this.setVisible(false);*/
        dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void locationBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationBoxActionPerformed
        String selectedLocation = (String) comboBoxModel.getSelectedItem();
        refreshSectors(selectedLocation);
        removeSectorButton.setEnabled(false);
    }//GEN-LAST:event_locationBoxActionPerformed

    protected boolean addArea(String location, String sector) {
        Area area = new Area(sector, location);
        if(area.existsInDatabase()) {
            Message.raiseError(this, "L'area "+area.toString()+" è già presente!");
            return false;
        }
        try {
            area.saveToDatabase();
            return true;
        } catch (SQLException ex) {
            Message.raiseError(this, "L'area "+area.toString()+" non è stata inserita correttamente!");
            return false;
        }
    }
    
    private void addAreaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAreaButtonActionPerformed
        String newLocation = JOptionPane.showInputDialog(this, "Inserisci il nome della nuova filiale", 
                "Creazione di una nuova area", JOptionPane.PLAIN_MESSAGE);
        if(newLocation == null) {
            //Message.raiseError(this, "Non è stata inserita nessuna filiale!");
            return;
        }
        String newSector = JOptionPane.showInputDialog(this, "Inserisci il nome del nuovo settore", 
                "Creazione di una nuova area", JOptionPane.PLAIN_MESSAGE);
        if(newSector == null || newSector.equals("")) {
            //Message.raiseError(this, "Non è stato inserito nessun settore per la nuova filiale '"+newLocation+"'!");
            return;
        }
        addArea(newLocation, newSector);
        refreshLocations();
        removeSectorButton.setEnabled(false);
    }//GEN-LAST:event_addAreaButtonActionPerformed

    protected boolean removeLocation(String location) {
        Area area = new Area(null, location);
        try {
            area.removeFromDatabaseWithLocation();
            return true;
        } catch (SQLException ex) {
            if(ex.getMessage().contains("viola il vincolo di chiave esterna"))
                Message.raiseError(this, "Non è possibile rimuovere la filiale '"+location+
                        "' perché\nun'attività è già stata assegnata a questa filiale!");
            else
                Message.raiseError(this, "La filiale '"+location+"' non è stata rimossa correttamente!");
            return false;
        }
    }
    
    private void removeLocationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeLocationButtonActionPerformed
        String selectedLocation = (String) locationBox.getSelectedItem();
        if (selectedLocation == null) {
            Message.raiseError(this, "Non è stata selezionata alcuna filiale!");
            return;
        }
        int reply = JOptionPane.showConfirmDialog(this, "Sei sicuro di voler rimuovere la filiale "
                + "'"+selectedLocation+"' ?", "Rimozione", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            removeLocation(selectedLocation);
        }
        refreshLocations();
        removeSectorButton.setEnabled(false);
    }//GEN-LAST:event_removeLocationButtonActionPerformed
    
    private void addSectorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSectorButtonActionPerformed
        String selectedLocation = (String) comboBoxModel.getSelectedItem();
        if (selectedLocation == null) {
            Message.raiseError(this, "Non è stata selezionata alcuna filiale!");
            return;
        }
        String newSector = JOptionPane.showInputDialog(this, "Inserisci il nome del nuovo settore", 
                "Creazione di una nuova area", JOptionPane.PLAIN_MESSAGE);
        if(newSector == null || newSector.equals("")) {
            Message.raiseError(this, "Non è stato inserito nessun nuovo settore per la filiale '"+
                    selectedLocation+"'!");
        }
        addArea(selectedLocation, newSector);
        refreshLocations();
        removeSectorButton.setEnabled(false);
    }//GEN-LAST:event_addSectorButtonActionPerformed

    protected boolean removeSector(String location, String sector) {
        Area area = new Area(sector, location);
        try {
            area.removeFromDatabase();
            return true;
        } catch (SQLException ex) {
            if(ex.getMessage().contains("viola il vincolo di chiave esterna"))
                Message.raiseError(this, "Non è possibile rimuovere l'area "+area.toString()+
                        "\nperché un'attività è già stata assegnata a quest'area!");
            else
                Message.raiseError(this, "L'area "+area.toString()+" non è stata rimossa corrrettamente!");
            return false;
        }
    }
    
    private void removeSectorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSectorButtonActionPerformed
        String selectedLocation = (String) locationBox.getSelectedItem();
        String selectedSector = sectorList.getSelectedValue();
        if (selectedLocation == null) {
            Message.raiseError(this, "Non è stata selezionata alcuna filiale!");
            return;
        }
        if(selectedSector == null) {
            Message.raiseError(this, "Non è stato selezionato alcun settore!");
            return;
        }
        int reply = JOptionPane.showConfirmDialog(this, "Sei sicuro di voler rimuovere l'area "
                +selectedSector+" - "+selectedLocation+" ?", "Rimozione", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            removeSector(selectedLocation, selectedSector);
        }
        refreshLocations();
        removeSectorButton.setEnabled(false);
    }//GEN-LAST:event_removeSectorButtonActionPerformed

    private void sectorListFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sectorListFocusGained
        removeSectorButton.setEnabled(true);
    }//GEN-LAST:event_sectorListFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AreaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AreaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AreaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AreaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AreaView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAreaButton;
    private javax.swing.JButton addSectorButton;
    private javax.swing.JButton backButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> locationBox;
    private javax.swing.JButton removeLocationButton;
    private javax.swing.JButton removeSectorButton;
    private javax.swing.JList<String> sectorList;
    // End of variables declaration//GEN-END:variables
}
