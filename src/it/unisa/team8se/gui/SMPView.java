/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package it.unisa.team8se.gui;

import it.unisa.team8se.DatabaseContext;
import it.unisa.team8se.DocumentImportWindow;
import it.unisa.team8se.Message;
import it.unisa.team8se.SizeStringGenerator;
import it.unisa.team8se.models.SMP;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.util.Pair;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author cptso
 */
public class SMPView extends javax.swing.JFrame {

    private LinkedList<SMP> smpInstances;
    private DefaultTableModel tableModel;
    private TableRowSorter tableSorter;

    private SMP addedSMP;
    private SMP selectedSMP;

    /**
     * Creates new form SMPView
     */
    public SMPView() {
        initComponents();

        if (!DatabaseContext.isConnected()) {
            DatabaseContext.connectDatabase();
        }
        smpInstances = new LinkedList<>();
        setupSMPList();
        refreshSMPList();
    }

    private void setupSMPList(){
        tableModel = new DefaultTableModel(new String[]{"Identifier", "Size"}, 0){
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }  
        };
        tableSorter = new TableRowSorter<TableModel>(tableModel);
        smpList.setModel(tableModel);
        smpList.setRowSorter(tableSorter);
    }
    
    private void refreshSMPList() {
        tableModel.setRowCount(0);
        smpInstances.clear();

        SMP[] allsmp = SMP.getAllDatabaseInstancesInfoOnly();
        if (allsmp != null && allsmp.length > 0) {
            for (SMP s : allsmp) {
                tableModel.addRow(new String[]{s.getNome(),
                    SizeStringGenerator.generate(s.getDocumentSize())});
                smpInstances.add(s);
            }
        }
    }

    private Pair checkSMPIdentifier(String id) {

        if (id == null || id.isEmpty()) {
            return new Pair<>(false, "Identifier not specified.");
        }

        if (smpInstances.size() > 0) {

            if (smpInstances.stream().anyMatch(s -> s.getNome().equals(id))) {
                return new Pair<>(false, "Identifier already exists.");
            } else {
                return new Pair<>(true, "");
            }
        }
        return new Pair<>(true, "");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        smpList = new javax.swing.JTable();
        smpNameInputField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        importDocumentButton = new javax.swing.JButton();
        removeSMPButton = new javax.swing.JButton();
        modifySMPButton = new javax.swing.JButton();
        openDocumentButton = new javax.swing.JButton();
        searchBar = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        sep0 = new javax.swing.JSeparator();
        addSMPButton = new javax.swing.JButton();
        documentNameLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        documentPathLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        documentSizeLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        cancelFilterButton = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SMP View");
        setBackground(new java.awt.Color(255, 204, 153));
        setIconImage(Message.getImageIcon());
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        smpList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        smpList.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        smpList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        smpList.setShowHorizontalLines(false);
        smpList.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(smpList);

        smpNameInputField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                smpNameInputFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                smpNameInputFieldFocusLost(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("SMP Identifier");

        importDocumentButton.setText("Import Document");
        importDocumentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importDocumentButtonActionPerformed(evt);
            }
        });

        removeSMPButton.setText("Remove");
        removeSMPButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSMPButtonActionPerformed(evt);
            }
        });

        modifySMPButton.setText("Modify");
        modifySMPButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifySMPButtonActionPerformed(evt);
            }
        });

        openDocumentButton.setText("Open");
        openDocumentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openDocumentButtonActionPerformed(evt);
            }
        });

        searchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBarActionPerformed(evt);
            }
        });

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/it/unisa/team8se/assets/icons/search_small.png"))); // NOI18N
        searchButton.setPreferredSize(new java.awt.Dimension(25, 25));
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        sep0.setOrientation(javax.swing.SwingConstants.VERTICAL);

        addSMPButton.setText("Add");
        addSMPButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSMPButtonActionPerformed(evt);
            }
        });

        documentNameLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        documentNameLabel.setText("No file selected");

        jLabel2.setText("Local path:");

        documentPathLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        documentPathLabel.setText("None");

        jLabel3.setText("Size:");

        documentSizeLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        documentSizeLabel.setText("0");
        documentSizeLabel.setToolTipText("");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("CREATE NEW SMP");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("SMP LIST");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("IMPORTED DOCUMENT PROPERTIES");

        jLabel8.setText("File:");

        cancelFilterButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/it/unisa/team8se/assets/icons/cancel_small.png"))); // NOI18N
        cancelFilterButton.setPreferredSize(new java.awt.Dimension(25, 25));
        cancelFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelFilterButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(openDocumentButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modifySMPButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeSMPButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addComponent(addSMPButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(importDocumentButton)
                                    .addComponent(jLabel4)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(smpNameInputField, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel7))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel8))
                                        .addGap(28, 28, 28)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(documentPathLabel)
                                            .addComponent(documentNameLabel)
                                            .addComponent(documentSizeLabel))))
                                .addGap(0, 39, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sep0, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2)
                                .addComponent(cancelFilterButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(smpNameInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(importDocumentButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addSMPButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(documentNameLabel)
                                    .addComponent(jLabel8))
                                .addGap(7, 7, 7)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(documentPathLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(documentSizeLabel)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel5)
                                        .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cancelFilterButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(removeSMPButton)
                            .addComponent(modifySMPButton)
                            .addComponent(openDocumentButton)))
                    .addComponent(sep0))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openDocumentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openDocumentButtonActionPerformed
        int index = smpList.getSelectedRow();
        if (index < 0) {
            Message.raiseInfo(this, "Please select a SMP first.");
            return;
        }

        SMP smp = smpInstances.get(index);
        if (!smp.isDocumentValid()) {
            smp.getDocumentFromDatabase();
        }

        smp.openDocument();
    }//GEN-LAST:event_openDocumentButtonActionPerformed

    private void modifySMPButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifySMPButtonActionPerformed
        int index = smpList.getSelectedRow();

        if (index < 0) {
            Message.raiseInfo(this, "Please select a SMP first.");
            return;
        }
        SMP smp = smpInstances.get(index);

        String newValue = (String) JOptionPane.showInputDialog(this, "Modify SMP Name", "Modify",
                JOptionPane.INFORMATION_MESSAGE, null, null, smp.getNome());
        if (newValue != null && !newValue.isEmpty()) {
            try {
                smp.updateNameInDatabase(newValue);
                tableModel.setValueAt(newValue, index, 0);
            } catch (SQLException ex) {
                Message.raiseError(this, "Error thrown during smp modification.");
                Logger.getLogger(SMPView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        smpList.clearSelection();
    }//GEN-LAST:event_modifySMPButtonActionPerformed

    private void removeSMPButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSMPButtonActionPerformed
        int index = smpList.getSelectedRow();

        if (index < 0) {
            Message.raiseInfo(this, "Please select a SMP first.");
            return;
        }

        SMP smp = smpInstances.get(index);
        try {
            smp.removeFromDatabase();
            refreshSMPList();
        } catch (SQLException ex) {
            Logger.getLogger(SMPView.class.getName()).log(Level.SEVERE, null, ex);
        }
        smpList.clearSelection();
    }//GEN-LAST:event_removeSMPButtonActionPerformed

    private void addSMPButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSMPButtonActionPerformed
        if (addedSMP == null) {
            Message.raiseError(this, "No document selected.");
            return;
        }

        try {
            String name = addedSMP.getNome();
            Pair result = checkSMPIdentifier(name);
            if (!(boolean) result.getKey()) {
                Message.raiseError(this, "Specified SMP name is not valid. Reason: " + (String) result.getValue());
                addSMPButton.setEnabled(false);
                return;
            }
            addedSMP.saveToDatabase();
            refreshSMPList();
        } catch (SQLException ex) {
            Logger.getLogger(SMPView.class.getName()).log(Level.SEVERE, null, ex);
        }
        addedSMP = null;

        smpNameInputField.setText("");

        documentPathLabel.setText("None");
        documentSizeLabel.setText("0");
        documentNameLabel.setText("No file selected");
    }//GEN-LAST:event_addSMPButtonActionPerformed

    private void importDocumentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importDocumentButtonActionPerformed
        File doc = DocumentImportWindow.importDocument(this);
        if (doc != null) {
            String name = smpNameInputField.getText();
            String filename = doc.getName().substring(0, doc.getName().length() - 4);
            if (name == null || name.isEmpty()) {
                smpNameInputField.setText(filename);
                name = filename;
            }

            addedSMP = new SMP();
            addedSMP.setNome(name);
            try {
                addedSMP.importDocument(doc.getAbsolutePath());
                documentPathLabel.setText(doc.getAbsolutePath());
                documentSizeLabel.setText(SizeStringGenerator.generate(addedSMP.getDocumentSize()));
                documentNameLabel.setText(filename);
            } catch (IOException ex) {
                Message.raiseError(this, "Error while importing pdf document.");
                Logger.getLogger(SMPView.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
        }
    }//GEN-LAST:event_importDocumentButtonActionPerformed

    private void smpNameInputFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_smpNameInputFieldFocusLost
        if (addedSMP != null)
            addedSMP.setNome(smpNameInputField.getText());
    }//GEN-LAST:event_smpNameInputFieldFocusLost

    private void smpNameInputFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_smpNameInputFieldFocusGained
        addSMPButton.setEnabled(true);
    }//GEN-LAST:event_smpNameInputFieldFocusGained

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        String searchQuery = searchBar.getText();
        if (searchQuery == null || smpList.getModel().getRowCount() <= 0) {
            return;
        }
        if (searchQuery.isEmpty()) {
            tableSorter.setRowFilter(null);
        }
        tableSorter.setRowFilter(RowFilter.regexFilter("(?i)" + searchQuery));
    }//GEN-LAST:event_searchButtonActionPerformed

    private void cancelFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelFilterButtonActionPerformed
        searchBar.setText(null);
        tableSorter.setRowFilter(null);
    }//GEN-LAST:event_cancelFilterButtonActionPerformed

    private void searchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBarActionPerformed
        String searchQuery = searchBar.getText();
        if (searchQuery == null || smpList.getModel().getRowCount() <= 0) {
            return;
        }
        if (searchQuery.isEmpty()) {
            tableSorter.setRowFilter(null);
        }
        tableSorter.setRowFilter(RowFilter.regexFilter("(?i)" + searchQuery));
    }//GEN-LAST:event_searchBarActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SMPView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SMPView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SMPView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SMPView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SMPView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addSMPButton;
    private javax.swing.JButton cancelFilterButton;
    private javax.swing.JLabel documentNameLabel;
    private javax.swing.JLabel documentPathLabel;
    private javax.swing.JLabel documentSizeLabel;
    private javax.swing.JButton importDocumentButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton modifySMPButton;
    private javax.swing.JButton openDocumentButton;
    private javax.swing.JButton removeSMPButton;
    private javax.swing.JTextField searchBar;
    private javax.swing.JButton searchButton;
    private javax.swing.JSeparator sep0;
    private javax.swing.JTable smpList;
    private javax.swing.JTextField smpNameInputField;
    // End of variables declaration//GEN-END:variables
}
