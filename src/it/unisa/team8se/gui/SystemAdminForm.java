/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package it.unisa.team8se.gui;

import it.unisa.team8se.DatabaseContext;
import it.unisa.team8se.models.Maintainer;
import it.unisa.team8se.models.Planner;
import it.unisa.team8se.models.base.User;
import it.unisa.team8se.models.SystemAdmin;
     

import java.awt.Toolkit;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Collections;
import java.util.LinkedList;


/**
 *
 * @author cptso
 */
public class SystemAdminForm extends javax.swing.JFrame {

    protected DefaultTableModel tableModel;
    private ButtonGroup buttonGroup;
    private final String username = "postgres";
    private final String password = "password";

    private void initTableModel() {
        tableModel = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tableModel.addColumn("Cognome");
        tableModel.addColumn("Nome");
        tableModel.addColumn("Username");
        tableModel.addColumn("Password");
        tableModel.addColumn("Ruolo");

    }

    private void initButtonGroup() {
        buttonGroup = new ButtonGroup();
        buttonGroup.add(plannerRadioButton);
        buttonGroup.add(maintainerRadioButton);
        buttonGroup.add(adminRadioButton);
    }

    /**
     * Creates new form SystemAdminForm
     */
    public SystemAdminForm() {
        DatabaseContext.connectDatabase("ProgettoSE",username, password);
        initTableModel();
        refreshUsers();
        initButtonGroup();
        //caricare dati dal db
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        usernameField = new javax.swing.JTextField();
        passwordField = new javax.swing.JTextField();
        insertButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        modifyButton = new javax.swing.JButton();
        nameField = new javax.swing.JTextField();
        surnameField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableUsers = new javax.swing.JTable();
        surnameLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        usernameLabel = new javax.swing.JLabel();
        plannerRadioButton = new javax.swing.JRadioButton();
        maintainerRadioButton = new javax.swing.JRadioButton();
        adminRadioButton = new javax.swing.JRadioButton();
        competenceButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("System Admistrator View\n");
        setBackground(new java.awt.Color(0, 51, 204));

        usernameField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                usernameFieldMouseClicked(evt);
            }
        });

        passwordField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                passwordFieldMouseClicked(evt);
            }
        });

        insertButton.setText("Inserisci");
        insertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Rimuovi");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        modifyButton.setText("Modifica");
        modifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyButtonActionPerformed(evt);
            }
        });

        nameField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nameFieldMouseClicked(evt);
            }
        });

        surnameField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                surnameFieldMouseClicked(evt);
            }
        });

        tableUsers.setAutoCreateRowSorter(true);
        tableUsers.setModel(tableModel);
        tableUsers.setRowSelectionAllowed(false);
        tableUsers.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableUsers.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tableUsers);

        surnameLabel.setText("Cognome");

        nameLabel.setText("Nome");

        passwordLabel.setText("Password");

        usernameLabel.setText("Username");

        plannerRadioButton.setText("Planner");
        plannerRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plannerRadioButtonActionPerformed(evt);
            }
        });

        maintainerRadioButton.setText("Maintainer");
        maintainerRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maintainerRadioButtonActionPerformed(evt);
            }
        });

        adminRadioButton.setText("System Admin");
        adminRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminRadioButtonActionPerformed(evt);
            }
        });

        competenceButton.setText("Competenze");
        competenceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                competenceButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(modifyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(76, 76, 76)
                        .addComponent(competenceButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(surnameField, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(99, 99, 99)
                                        .addComponent(surnameLabel)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(114, 114, 114)
                                        .addComponent(nameLabel))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(96, 96, 96)
                                        .addComponent(usernameLabel)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(passwordLabel)
                                        .addGap(10, 10, 10)))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(plannerRadioButton)
                            .addComponent(maintainerRadioButton)
                            .addComponent(adminRadioButton)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(insertButton))))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(57, 57, 57))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(surnameLabel)
                            .addComponent(nameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(surnameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(plannerRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(maintainerRadioButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 2, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(adminRadioButton)
                        .addGap(16, 16, 16))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(usernameLabel)
                            .addComponent(passwordLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(insertButton)
                    .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeButton)
                    .addComponent(modifyButton)
                    .addComponent(competenceButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    protected boolean refreshUsers() {
        tableModel.setRowCount(0);
        LinkedList<User> allUsers = new LinkedList<>();
        
        Maintainer[] ms = Maintainer.getAllDatabaseInstances();
        if(ms != null){
            Collections.addAll(allUsers, ms);
        }
        else{
            return false;
        }
        
        Planner[] ps = Planner.getAllDatabaseInstances();
        if(ps != null){
            Collections.addAll(allUsers, ps);
        }
        else{
            return false;
        }
        
        SystemAdmin[] sas = SystemAdmin.getAllDatabaseInstances();
        if(sas != null){
            Collections.addAll(allUsers, sas);
        }
        else{
            return false;
        }
        
        for(User u : allUsers){
            tableModel.addRow(u.toArray());
        }
        
        return true;
        /*
        try {
            Connection connection = DatabaseContext.getConnection();
            Statement statement = connection.createStatement();
            
            
            
            ResultSet rs = statement.executeQuery("select * from maintainer order by username");
            while (rs.next()) {
                tableModel.addRow(User.toArray(rs.getString("cognome"), rs.getString("nome"), rs.getString("username"), rs.getString("password"), "maintainer"));
            }

            rs = statement.executeQuery("select * from planner order by username");
            while (rs.next()) {
                tableModel.addRow(User.toArray(rs.getString("cognome"), rs.getString("nome"), rs.getString("username"), rs.getString("password"), "planner"));
            }

            rs = statement.executeQuery("select * from system_administrator order by username");
            while (rs.next()) {
                tableModel.addRow(User.toArray(rs.getString("cognome"), rs.getString("nome"), rs.getString("username"), rs.getString("password"), "system admin"));
            }

            rs.close();
            statement.close();
        } catch (SQLException ex) {
            raiseError("Errore nella lettura degli utenti");
            return false;
        }
        return true;
        */
    }

    protected boolean containsUsername(String username) {

        for (int i = 0; i < tableModel.getRowCount(); i++) {
            String value = (String) tableModel.getValueAt(i, 2);
            if (value.equalsIgnoreCase(username)) {
                return true;
            }
        }
        return false;
    }

    protected void raiseError(String message) {
        Toolkit.getDefaultToolkit().beep();
        JOptionPane.showMessageDialog(this, message, "Errore", JOptionPane.ERROR_MESSAGE);
    }

    protected boolean insertUser(String surname, String name, String username, String password, String role) {
        if (containsUsername(username)) {
            raiseError("Username già presente!");
            return false;
        }
        if (surname.equals("") || name.equals("") || username.equals("") || password.equals("")) {
            raiseError("Inserire tutti i campi!");
            return false;
        }

        try {
            Connection c = DatabaseContext.getConnection();
            String query = "insert into " + role + "(username,password,cognome,nome) values(?,?,?,?)";
            PreparedStatement ps = c.prepareStatement(query);
            //ps.setString(1, role);
            ps.setString(1, username);
            ps.setString(2, password);
            ps.setString(3, surname);
            ps.setString(4, name);
            ps.executeUpdate();
            ps.close();

        } catch (SQLException ex) {
            raiseError("Errore nell'inserimento");
            return false;
        }
        refreshUsers();

        return true;

    }

    private void insertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertButtonActionPerformed
        //mettere tendina per scegliere ruolo
        String surname = surnameField.getText();
        String name = nameField.getText();
        String username = usernameField.getText();
        String password = passwordField.getText();
        String role = new String();

        if (plannerRadioButton.isSelected()) {
            role = "planner";

        } else if (maintainerRadioButton.isSelected()) {
            role = "maintainer";

        } else if (adminRadioButton.isSelected()) {
            role = "system_administrator";
        } else {
            raiseError("Inserire un ruolo!");
            return;
        }

        insertUser(surname, name, username, password, role);

    }//GEN-LAST:event_insertButtonActionPerformed

    private void surnameFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_surnameFieldMouseClicked
        surnameField.setText("");
    }//GEN-LAST:event_surnameFieldMouseClicked

    private void nameFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nameFieldMouseClicked
        nameField.setText("");
    }//GEN-LAST:event_nameFieldMouseClicked

    private void passwordFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_passwordFieldMouseClicked
        passwordField.setText("");
    }//GEN-LAST:event_passwordFieldMouseClicked

    private void usernameFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usernameFieldMouseClicked
        usernameField.setText("");
    }//GEN-LAST:event_usernameFieldMouseClicked

    protected boolean modifyUser(String newValue, int selectedRow, int selectedColumn) {
        String selectedUsername = (String) tableModel.getValueAt(selectedRow, 3);

        if (selectedColumn == 2 && containsUsername(newValue)) {
            raiseError("Username già presente!");
            return false;
        }

        tableModel.setValueAt(newValue, selectedRow, selectedColumn);
        String field = tableModel.getColumnName(selectedColumn);           
        //modificare in db usando selectedUser come chiave
        if(field.equals("Ruolo")){
            
        }
        
        /*
        try {
            Connection c = DatabaseContext.getConnection();
            selectedColumn = tableUsers.getSelectedColumn();
            String field = tableModel.getColumnName(selectedColumn);
            PreparedStatement ps;

            if (field.equals("Ruolo")) {
                String query = "insert into " + newValue + "(username,password,cognome,nome) values(?,?,?,?)";
                ps = c.prepareStatement(query);
                ps.setString(1, (String) tableModel.getValueAt(selectedRow, 2));
                ps.setString(2, (String) tableModel.getValueAt(selectedRow, 3));
                ps.setString(3, (String) tableModel.getValueAt(selectedRow, 0));
                ps.setString(4, (String) tableModel.getValueAt(selectedRow, 1));
                ps.executeUpdate();
                if (((String) tableModel.getValueAt(selectedRow, selectedColumn)).equalsIgnoreCase("planner")) {
                    String query1 = "delete from planner where username = ?";
                    ps = c.prepareStatement(query1);
                    ps.setString(1, (String) tableModel.getValueAt(selectedRow, 2));
                    ps.executeUpdate();

                }
                if (((String) tableModel.getValueAt(selectedRow, selectedColumn)).equalsIgnoreCase("maintainer")) {
                    String query1 = "delete from maintainer where username = ?";
                    ps = c.prepareStatement(query1);
                    ps.setString(1, (String) tableModel.getValueAt(selectedRow, 2));
                    ps.executeUpdate();

                }
                if (((String) tableModel.getValueAt(selectedRow, selectedColumn)).equalsIgnoreCase("system admin")) {
                    String query1 = "delete from system_administrator where username = ?";
                    ps = c.prepareStatement(query1);
                    ps.setString(1, (String) tableModel.getValueAt(selectedRow, 2));
                    ps.executeUpdate();

                }
            } else {
                String query = "update " + tableModel.getValueAt(selectedRow, 4) + " set " + field +"= ? where username = ?";
                ps = c.prepareStatement(query);
                ps.setString(1, newValue);
                ps.setString(2, (String) tableModel.getValueAt(selectedRow, 2));
                ps.executeUpdate();
            }
            ps.close();

        } catch (SQLException ex) {
            raiseError("Errore nella modifica");
            return false;
        }
        
        refreshUsers();
        return true;
        */
        return true;
    }

    private void modifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyButtonActionPerformed
        //chiedere a madison delucidazioni su SELECTION MODEL

        int selectedRow = tableUsers.getSelectedRow();
        int selectedColumn = tableUsers.getSelectedColumn();

        if (selectedRow == -1 || selectedColumn == -1) {
            raiseError("Selezionare una cella");
            return;
        }

        boolean modifyingRole = false;
        String field = tableModel.getColumnName(selectedColumn);
        String newValue = new String();
        if (field.equals("Ruolo")) {
            String[] options = {"Planner", "Maintainer", "System Admin"};
            int choice = JOptionPane.showOptionDialog(this, "Modifica " + field, "Modifica", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, null);
            System.out.println(choice);
            switch (choice) {
                case -1:
                    newValue = (String) tableModel.getValueAt(selectedRow, selectedColumn);
                    break;
                case 0:
                    newValue = "Planner";
                    break;
                case 1:
                    newValue = "Maintainer";
                    break;
                case 2:
                    newValue = "System Admin";
                    break;
            }
        } else {
            newValue = JOptionPane.showInputDialog(this, "Modifica " + field, "Modifica", JOptionPane.INFORMATION_MESSAGE);
            if (newValue == null || newValue.equals("")) {
                return;
            }
        }

        modifyUser(newValue, selectedRow, selectedColumn);


    }//GEN-LAST:event_modifyButtonActionPerformed

    protected void removeUser(String selectedUsername, int selectedRow) {
        tableModel.removeRow(selectedRow);
        //rimuovere dal db con l'username calcolato
    }

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        int selectedRow = tableUsers.getSelectedRow();

        if (selectedRow == -1) {
            raiseError("Selezionare una riga!");
            return;
        }

        String selectedUsername = (String) tableModel.getValueAt(selectedRow, 3);

        int reply = JOptionPane.showConfirmDialog(this, "Sei sicuro di rimuovere l'utente con username '" + selectedUsername + "' ?", "Rimozione", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (reply == JOptionPane.YES_OPTION) {
            removeUser(selectedUsername, selectedRow);
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void plannerRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plannerRadioButtonActionPerformed

        maintainerRadioButton.setSelected(false);
        adminRadioButton.setSelected(false);
    }//GEN-LAST:event_plannerRadioButtonActionPerformed

    private void maintainerRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maintainerRadioButtonActionPerformed

        plannerRadioButton.setSelected(false);
        adminRadioButton.setSelected(false);
    }//GEN-LAST:event_maintainerRadioButtonActionPerformed

    private void adminRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminRadioButtonActionPerformed

        plannerRadioButton.setSelected(false);
        maintainerRadioButton.setSelected(false);
    }//GEN-LAST:event_adminRadioButtonActionPerformed

    private void competenceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_competenceButtonActionPerformed
        // TODO add your handling code here:
        CompetenceView competence = new CompetenceView();
        competence.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_competenceButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SystemAdminForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SystemAdminForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SystemAdminForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SystemAdminForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SystemAdminForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton adminRadioButton;
    private javax.swing.JButton competenceButton;
    private javax.swing.JButton insertButton;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton maintainerRadioButton;
    private javax.swing.JButton modifyButton;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JRadioButton plannerRadioButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JTextField surnameField;
    private javax.swing.JLabel surnameLabel;
    private javax.swing.JTable tableUsers;
    private javax.swing.JTextField usernameField;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables
}
